#!/bin/sh
# xspacpe00 Petr Spac
# 15.3.2024

export POSIXLY_CORRECT=yes
export LC_ALL=C

nl='
'

REGEX_DATE='[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}'

show_help() { 
    echo "Skript pro předzpracování logů z Vaší kryptoměnové burzy."
    echo
    echo "Pouziti: $0 [-h|--help] [FILTR] [PŘÍKAZ] UŽIVATEL LOG [LOG2 [...]"
    echo
    echo "-h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače."
    echo
    echo "FILTR může být kombinace následujících:"
    echo "-a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu a čase (bez něj). DATETIME je formátu YYYY-MM-DD HH:MM:SS"
    echo "-b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem a časem (bez něj)"
    echo "-c CURRENCY – jsou uvažovány pouze záznamy odpovídající dané měně"
    echo "-h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače"
    echo
    echo "PŘÍKAZ může být jeden z:"
    echo "list          – výpis záznamů pro daného uživatele"
    echo "list-currency – výpis seřazeného seznamu vyskytujících se měn"
    echo "status        – výpis skutečného stavu účtu seskupeného a seřazeného dle jednotlivých měn"
    echo "profit        – výpis stavu účtu zákazníka se započítaným fiktivním výnosem"
    echo
    echo "LOG, LOG2 ... jsou vstupni soubory ve formatu CSV"
}

handle_file() {
    file="$1"
    if (file "$file" | grep -q compressed); then
        gunzip -c "$file"
    else
        cat "$file"
    fi
}

list_currency() {
    if [ -z "$NAME" ]; then
        echo "list_currency: No user-name" >&2
        exit 1
    fi

    if [ -z "$CURRENCIES" ]; then
        list_curr_tmp=$(handle_file "$1" | awk -v name="$NAME" -F ";" '{ if ($1 == name && curr[$3] != 1) { print($3); curr[$3] = 1; } }')
        list_curr_output="${list_curr_output}${list_curr_tmp}$nl"
    else
        for curr in $CURRENCIES; do
            list_curr_tmp=$(handle_file "$1" | awk -v name="$NAME" -v curr="$curr" -F ";" '{ if ($1 == name && $3 == curr && curr_list[$3] != 1) { print($3); curr_list[$3] = 1; } }')
            list_curr_output="${list_curr_output}${list_curr_tmp}$nl"
        done
    fi
}

list() {
    if [ -z "$NAME" ]; then
        echo "list: No user-name" >&2
        exit 1
    fi

    list_currency "$1"
    list_tmp=$(echo "$list_curr_output" | awk -v name="$NAME" -F ";" 'NF { if ( curr[$1] != 1) { print($1); curr[$1] = 1; } }')

    for curr in $list_tmp; do
        handle_file "$1" | awk -v name="$NAME" -v curr="$curr" -v after="$AFTER" -v before="$BEFORE" -F ";" '{
        if($1 == name && (curr == "" || $3 == curr)) {
            if((after == "" || $2 > after) && (before == "" || $2 < before)) {
                print
            }
        }
    }'
    done

}

#$3 - Currency, $4 - After, $5 - Before
status_or_profit() {
    PROFIT_CALL=$1

    if [ -n "$PROFIT_CALL" ] && [ -z "${XTF_PROFIT}" ]; then
        PROFIT=20
    else
        # WARNING: CHECK THIS
        PROFIT="${XTF_PROFIT}"
    fi

    list_currency "$2"
    what=$(echo "$list_curr_output" | awk -v name="$NAME" -F ";" 'NF { if ( curr[$1] != 1) { print($1); curr[$1] = 1; } }')

    for curr in $what; do
        stat_or_prof_tmp=$(handle_file "$2" | awk -v name="$NAME" -v curr="$curr" -v after="$AFTER" -v before="$BEFORE" -v profit="$PROFIT" -F ";" 'NF {
        if($1 == name && $3 == curr) {
            if((after == "" || $2 > after) && (before == "" || $2 < before)) {
                sum += $4;
            }
        }
    }
END {
if(sum > 0 || sum < 0) {
    if(profit && sum > 0) {
        printf "%s:%.4f\n", curr, sum + (sum * (profit / 100))
    } else {
    printf "%s:%.4f\n", curr, sum
}
}
}')

        stat_or_prof_out="${stat_or_prof_out}${stat_or_prof_tmp}$nl"
    done
}

set_argument() {
    if [ -n "$2" ]; then
        if [ "$1" = "AFTER" ] || [ "$1" = "BEFORE" ]; then
            if ! echo "$2" | grep -Eq "$REGEX_DATE"; then
                echo "Wrong date format" >&2
                exit 1
            else
                if ! date -d "$2" >/dev/null 2>&1; then
                    if ! date -j -f "%Y-%m-%d %H:%M:%S" "$2" >/dev/null 2>&1; then
                        echo "Invalid date $2" >&2
                        exit 1
                    fi
                fi
            fi
        fi

        eval "$1=\"$2\""
    else
        echo "Wrong $1 argument" >&2
        exit 1
    fi
}

check_command() {
    if [ -n "$COMMAND_SET" ]; then
        echo "Wrong number of commands" >&2
        exit 1
    fi
}

file_format_check() {
    check=$(handle_file "$1" | awk -F';' '{
        if (NF!=4 || !length($1) || !length($2) || !length($3) || !length($4) || ($4+0 != $4)) {
            print "File contains invalid data"; exit 1
        }
        
        split($2, dateTime, " ");
        split(dateTime[1], dateParts, "-");
        split(dateTime[2], timeParts, ":");
        
        timeStr = dateParts[1] " " dateParts[2] " " dateParts[3] " " timeParts[1] " " timeParts[2] " " timeParts[3];
        
        if (mktime(timeStr) == -1) {
            print "Invalid date"; exit 1
        }
    }')

    if [ -n "$check" ]; then
        echo "$check" >&2
        exit 1
    fi
}

COMMAND="list"

while [ "$#" -gt 0 ]; do
    case $1 in
    -a)
        if [ -z "$AFTER" ]; then
            set_argument AFTER "$2"
            shift 2
        else
            echo "Invalid number of -a flags" >&2
            exit 1
        fi
        ;;
    -b)
        if [ -z "$BEFORE" ]; then
            set_argument BEFORE "$2"
            shift 2
        else
            echo "Invalid number of -b flags" >&2
            exit 1
        fi
        ;;
    -c)
        if [ "$(echo "$2" | awk '{print length}')" -gt 3 ]; then
            echo "Invalid currency $2" >&2
            exit 1
        fi

        curr="$2"
        CURRENCIES="${curr} ${CURRENCIES}"
        shift 2
        ;;
    -h | --help)
        show_help
        exit 0
        ;;
    list)
        check_command
        COMMAND='list'
        COMMAND_SET="1"
        shift
        ;;
    list-currency)
        check_command
        COMMAND='list-currency'
        COMMAND_SET="1"
        shift
        ;;
    status)
        check_command
        COMMAND='status'
        COMMAND_SET="1"
        shift
        ;;
    profit)
        check_command
        COMMAND='profit'
        COMMAND_SET="1"
        shift
        ;;
    *)
        if [ -z "$NAME" ]; then
            NAME="$1"
        else

            for file in "$@"; do
                if ! [ -f "$file" ]; then
                    echo "Wrong file $file" >&2
                    exit 1
                fi

            # CHECK HERE FILE VALIDITY
            file_format_check "$file"


            done

            if [ "$COMMAND" = "list" ]; then
                list "$1" | sort -t ";" -nk2
            elif [ "$COMMAND" = "list-currency" ]; then
                list_currency "$1"
            elif [ "$COMMAND" = "status" ]; then
                status_or_profit "" "$1"
            elif [ "$COMMAND" = "profit" ]; then
                status_or_profit "1" "$1"
            fi
        fi
        shift
        ;;
    esac
done

case $COMMAND in
list)
    exit 0
    ;;
list-currency)
    echo "$list_curr_output" | awk -F ";" 'NF { if ( curr[$1] != 1) { print($1); curr[$1] = 1; } }' | sort
    exit 0
    ;;
status | profit)
    echo "$stat_or_prof_out" | awk -F ':' 'NF > 0 { sum[$1] += $2 } END { for (currency in sum) { if(currency) printf "%s : %.4f\n", currency, sum[currency] } }' | sort
    exit 0
    ;;
esac
